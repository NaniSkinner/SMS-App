import * as Google from "expo-auth-session/providers/google";
import * as WebBrowser from "expo-web-browser";
import { deleteDoc, doc, getDoc, setDoc, updateDoc } from "firebase/firestore";
import React from "react";
import { auth, db } from "./firebase.config";

// Finish warmup for web browser
WebBrowser.maybeCompleteAuthSession();

// Google OAuth Configuration
// iOS Client ID (for native redirect)
const GOOGLE_IOS_CLIENT_ID =
  "703601462595-qm6fnoqu40dqiqleejiiaean8v703639.apps.googleusercontent.com";

// Web Client ID (for server-side token validation)
const GOOGLE_WEB_CLIENT_ID =
  "703601462595-i3642bdphokl5pvpb0q0opl4e72iqflu.apps.googleusercontent.com";

// Scopes needed for Google Calendar
const CALENDAR_SCOPES = [
  "https://www.googleapis.com/auth/calendar.readonly",
  "https://www.googleapis.com/auth/calendar.events",
  "openid",
  "profile",
  "email",
];

/**
 * Custom hook to handle Google OAuth for Calendar access
 *
 * Usage:
 * ```
 * const { promptAsync, isLoading } = useGoogleCalendarAuth();
 *
 * const handleConnectCalendar = async () => {
 *   const result = await promptAsync();
 *   // Tokens are automatically stored in Firestore
 * };
 * ```
 */
export function useGoogleCalendarAuth() {
  const [request, response, promptAsync] = Google.useAuthRequest({
    iosClientId: GOOGLE_IOS_CLIENT_ID,
    webClientId: GOOGLE_WEB_CLIENT_ID,
    scopes: CALENDAR_SCOPES,
    // Note: redirectUri is auto-generated by expo-auth-session for iOS
    // It will use: com.googleusercontent.apps.{IOS_CLIENT_ID}:/oauth2redirect/google
  });

  // Handle OAuth response
  React.useEffect(() => {
    if (response?.type === "success") {
      const { authentication } = response;
      console.log("‚úÖ OAuth success! Processing authentication...");
      handleAuthSuccess(authentication);
    } else if (response?.type === "error") {
      console.error("‚ùå OAuth error:", response.error);
      console.error("Full response:", JSON.stringify(response, null, 2));
      // Handle error in UI
    } else if (response) {
      console.log("OAuth response type:", response.type);
      console.log("Full response:", JSON.stringify(response, null, 2));
    }
  }, [response]);

  return {
    promptAsync,
    request,
    isLoading: !request,
  };
}

/**
 * Handle successful OAuth authentication
 * Exchanges authorization code for tokens and stores in Firestore
 */
async function handleAuthSuccess(authentication: any) {
  try {
    console.log("üîê Starting handleAuthSuccess...");
    console.log(
      "Authentication object:",
      JSON.stringify(authentication, null, 2)
    );

    if (!authentication) {
      throw new Error("No authentication data received from Google");
    }

    const currentUser = auth.currentUser;
    if (!currentUser) {
      throw new Error("User not authenticated");
    }

    console.log("‚úÖ Current user:", currentUser.uid);

    const { accessToken, refreshToken, expiresIn } = authentication;

    if (!accessToken) {
      throw new Error("No access token received from Google");
    }

    console.log("‚úÖ Access token received, expires in:", expiresIn);

    // Calculate expiry timestamp
    const expiresAt = new Date();
    expiresAt.setSeconds(expiresAt.getSeconds() + (expiresIn || 3600));

    console.log("üíæ Storing tokens in Firestore...");

    // Store tokens in Firestore (encrypted on backend when needed)
    const tokenRef = doc(db, "users", currentUser.uid, "tokens", "google");
    await setDoc(tokenRef, {
      accessToken,
      refreshToken: refreshToken || null,
      expiresAt,
      scope: CALENDAR_SCOPES.join(" "),
      grantedAt: new Date(),
      updatedAt: new Date(),
    });

    console.log("‚úÖ Tokens stored successfully");

    // Update user preferences to indicate calendar is connected
    const userRef = doc(db, "users", currentUser.uid);
    await updateDoc(userRef, {
      calendarConnected: true,
      calendarProvider: "google",
    });

    console.log("‚úÖ Google Calendar connected successfully!");
  } catch (error) {
    console.error("‚ùå Error storing OAuth tokens:", error);
    throw error;
  }
}

/**
 * Check if user has connected their Google Calendar
 */
export async function isCalendarConnected(): Promise<boolean> {
  try {
    const currentUser = auth.currentUser;
    if (!currentUser) return false;

    const tokenRef = doc(db, "users", currentUser.uid, "tokens", "google");
    const tokenDoc = await getDoc(tokenRef);

    if (!tokenDoc.exists()) return false;

    const data = tokenDoc.data();

    // Check if token exists and is not expired
    if (!data?.accessToken) return false;

    const expiresAt = data.expiresAt?.toDate();
    if (!expiresAt) return false;

    // Token is valid if it expires in the future
    return expiresAt > new Date();
  } catch (error) {
    console.error("Error checking calendar connection:", error);
    return false;
  }
}

/**
 * Disconnect Google Calendar (revoke access)
 */
export async function disconnectCalendar(): Promise<void> {
  try {
    const currentUser = auth.currentUser;
    if (!currentUser) return;

    // Delete tokens from Firestore
    const tokenRef = doc(db, "users", currentUser.uid, "tokens", "google");
    await deleteDoc(tokenRef);

    // Update user preferences
    const userRef = doc(db, "users", currentUser.uid);
    await updateDoc(userRef, {
      calendarConnected: false,
      calendarProvider: null,
    });

    console.log("‚úÖ Google Calendar disconnected");
  } catch (error) {
    console.error("Error disconnecting calendar:", error);
    throw error;
  }
}

/**
 * Get current calendar connection status
 */
export async function getCalendarStatus(): Promise<{
  connected: boolean;
  expiresAt?: Date;
  scopes?: string[];
}> {
  try {
    const currentUser = auth.currentUser;
    if (!currentUser) {
      return { connected: false };
    }

    const tokenRef = doc(db, "users", currentUser.uid, "tokens", "google");
    const tokenDoc = await getDoc(tokenRef);

    if (!tokenDoc.exists()) {
      return { connected: false };
    }

    const data = tokenDoc.data();
    const expiresAt = data?.expiresAt?.toDate();

    return {
      connected: true,
      expiresAt,
      scopes: data?.scope?.split(" ") || [],
    };
  } catch (error) {
    console.error("Error getting calendar status:", error);
    return { connected: false };
  }
}
